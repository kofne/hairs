// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders             Order[]
  reviews            Review[]
  cart               Cart?
  accounts           Account[]
  sessions           Session[]
  affiliateProfile   AffiliateProfile?
  referredAffiliates AffiliateReferral[] @relation("ReferredUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  images      String[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  stock       Int      @default(0)
  sku         String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]

  @@index([categoryId])
  @@index([sku])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.Text
  slug        String     @unique
  image       String?
  parentId    String? // For subcategories
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([slug])
  @@index([parentId])
}

model Order {
  id                 String              @id @default(cuid())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  items              OrderItem[]
  status             OrderStatus         @default(PENDING)
  total              Decimal             @db.Decimal(10, 2)
  subTotal           Decimal             @db.Decimal(10, 2)
  tax                Decimal             @db.Decimal(10, 2)
  shipping           Decimal             @db.Decimal(10, 2)
  shippingAddress    Json
  billingAddress     Json
  paymentIntentId    String?             @unique
  paymentStatus      PaymentStatus       @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  affiliateReferrals AffiliateReferral[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  @@index([cartId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  title     String?
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model AffiliateProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  referralCode   String   @unique
  commissionRate Float    @default(10.0)
  totalEarnings  Float    @default(0)
  paymentInfo    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  referrals AffiliateReferral[]
}

model AffiliateReferral {
  id             String           @id @default(cuid())
  affiliateId    String
  affiliate      AffiliateProfile @relation(fields: [affiliateId], references: [id])
  referredUserId String?
  referredUser   User?            @relation("ReferredUser", fields: [referredUserId], references: [id])
  orderId        String?
  order          Order?           @relation(fields: [orderId], references: [id])
  commission     Float
  status         ReferralStatus   @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
